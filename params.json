{"name":"pysbf","tagline":"A Python module to parse \"Septentrio Binary Format\" (SBF) files generated by Septentrio receivers.","body":"# pysbf\r\n\r\nA Python module to read \"Septentrio Binary Format\" (SBF) files generated by Septentrio receivers.\r\n\r\n## Dependencies\r\n\r\n### Required:\r\n* A C compiler (GCC preferred).\r\n* Python 2.7+ (Make sure your C compiler can find the Python API `\"Python.h\"` header file)\r\n\r\n### Optional:\r\n* Cython v0.19-dev+ \r\n\r\n\r\n## Installation\r\n\r\nA Python distutils **setup.py** script is included.\r\nRun this script with the Python interpreter you would normally use.  \r\nFor example,\r\n>python2 setup.py build  \r\n>python2 setup.py install\r\n\r\n## Release Notes\r\n\r\n* Up to 100x times faster parsing (than pure Python, thanks to Cython). Python module is written in C and complied for C-like speeds.\r\n* All blocks documented in documentation v1.13.0 are now supported.\r\n\r\n## Usage\r\n\r\nThe basic function of this module is to parse every block inside a SBF file into a map.\r\nTherefore, the `dict` built-in Python object is used to represent each block. \r\n\r\n### Functions\r\n\r\n#### `load(f_obj, limit=-1, blocknames=set())`:\r\nReturns a iterator/generator of SBF blocks.  \r\n`f_obj` should be a file object.  \r\n\r\nBy default every type of block is generated, however most of the time only certain types\r\nof blocks are needed. This can be accomplished by providing a set of block names to \r\nthe `blocknames` parameter.  \r\n\r\n`limit` limits the number of blocks generated.  \r\n\r\n\r\n## Examples\r\n\r\nPrint the block name for the first 100 blocks:\r\n\r\n```python\r\nimport pysbf\r\n    \r\nwith open('./dummy.sbf') as sbf_fobj:\r\n for blockName, block in pysbf.load(sbf_fobj, limit=100):\r\n  print blockName\r\n```\r\n      \r\nPrint the azimuth & elevation for each visible satellite using the first 100 *SatVisibility* blocks:\r\n\r\n```python\r\nimport pysbf\r\n    \r\nwith open('./dummy.sbf') as sbf_fobj:\r\n for blockName, block in pysbf.load(sbf_fobj, limit=100, blocknames={'SatVisibility'}):\r\n  for satInfo in block['SatInfo']:\r\n   print satInfo['SVID'], satInfo['Azimuth'], satInfo['Elevation']\r\n```\r\n\r\nCombine with matplotlib & numpy for plots. A simple plot of CPU load vs time using the first 100 *ReceiverStatus* blocks:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport pysbf as sbf\r\n    \r\nwith open('./dummy.sbf') as sbf_fobj:\r\n cpuload = ( '{} {}\\n'.format(b['TOW'], b['CPULoad']) for bn, b in sbf.load(sbf_fobj, 100, {'ReceiverStatus_v2'}) )\r\n data = np.loadtxt(cpuload)\r\n plt.xlabel('Time (ms)')\r\n plt.ylabel('CPU Load (%)')\r\n plt.plot(data[:,0], data[:,1])\r\n plt.show()\r\n```\r\n\r\n## Issues/Errors\r\n\r\nFile a issue on github @ https://github.com/jashandeep-sohi/pysbf\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}